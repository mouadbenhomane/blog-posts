---
title: "Using JSZip to Extract Zip Files in Salesforce"
date: "2024-12-15"
excerpt: "This blog explains using JSZip for extracting zip files in Salesforce."
tags: ["Salesforce", "Development"]
---

Using JSZip to Extract Zip Files in Salesforce
### **Document Content: 
Using JSZip to Extract Zip Files in Salesforce**

### **Introduction**

Salesforce developers often need to handle zip files, especially when dealing with bulk file uploads or compressed data transfers. **JSZip** is a powerful JavaScript library that allows us to work with zip files directly in the browser, making it a great choice for client-side file extraction in Salesforce applications.

### **Why Use JSZip in Salesforce?**

- **Client-Side Processing**: Reduces Apex governor limits by handling zip files in the browser.
- **Fast and Efficient**: Works asynchronously, improving performance for large files.
- **Easy Integration**: Can be used in **Lightning Web Components (LWC)** to extract and display zip file contents dynamically.

### **How JSZip Works in LWC**

1. Load the **JSZip** library using **Static Resources** or a **CDN**.
2. Use JavaScript to read the zip file as a **Blob or Base64 string**.
3. Extract the contents and process individual files (e.g., display text files or images).

### **Example: Extracting Files from a Zip in LWC**

```jsx
import JSZip from '@salesforce/resourceUrl/jszip';
import { loadScript } from 'lightning/platformResourceLoader';

export default class ZipExtractor extends LightningElement {
    zipFile; // Store the uploaded zip file

    connectedCallback() {
        loadScript(this, JSZip).then(() => {
            console.log('JSZip library loaded successfully');
        }).catch(error => {
            console.error('Error loading JSZip:', error);
        });
    }

    handleFileUpload(event) {
        let file = event.target.files[0];
        let reader = new FileReader();

        reader.onload = async () => {
            let zip = await JSZip.loadAsync(reader.result);
            zip.forEach((relativePath, file) => {
                console.log('Extracted file:', relativePath);
            });
        };

        reader.readAsArrayBuffer(file);
    }
}

```

### **Use Cases for JSZip in Salesforce**

- Extracting **CSV files** from zip attachments and processing them in LWC.
- Handling **bulk document uploads** without hitting Salesforce storage limits.
- Previewing and downloading extracted files directly from a zip archive.

### **Conclusion**

JSZip is a lightweight and effective tool for handling zip files in Salesforce. By integrating it into **Lightning Web Components**, developers can improve user experience and optimize file management workflows.

---

### **LinkedIn Post**

🚀 **Extracting Zip Files in Salesforce with JSZip** 🚀

Recently, I used **JSZip** to efficiently extract zip files within a **Salesforce Lightning Web Component (LWC)**. This helped process compressed files directly on the client side, avoiding Apex governor limits.

If you're working with zip files in Salesforce, I highly recommend checking out **JSZip**! Here's a great resource to get started: [How to Extract Zip Files in Salesforce](https://www.apexhours.com/how-to-extract-zip-files-in-salesforce/)

Have you used JSZip before? Let’s discuss in the comments! 💬

=======================================

=======================================

# LinkedIn Post

📦 #SalesforceTip: JSZip Integration

Recently, I implemented JSZip in our Salesforce org and wanted to share this valuable integration with my network!

For those unfamiliar, JSZip is a powerful JavaScript library that lets you work with ZIP files directly in the browser. Integrating it with Salesforce was surprisingly straightforward:

1️⃣ Added JSZip as a static resource in our Salesforce org
2️⃣ Referenced it in our Lightning components using ltng:require
3️⃣ Implemented client-side extraction logic to process uploaded ZIP files

The results were impressive - our users can now upload compressed files directly, and the system automatically extracts and processes the contents without any manual unzipping.

This integration has streamlined our document import processes significantly and removed a major pain point for our users who regularly work with archived files.

Have you worked with JSZip or similar libraries in your Salesforce implementations? What other JavaScript libraries have you found useful to extend Salesforce's capabilities?

#Salesforce #SalesforceDevs #JavaScript #Integration #LightningComponents

================

================

# Integrating JSZip with Salesforce

## Overview

This document explains how to integrate the JSZip JavaScript library with Salesforce to enable ZIP file extraction capabilities. JSZip is a powerful JavaScript library that allows for the creation, reading, and extraction of ZIP archives directly in the browser.

## Integration Steps

### 1. Adding JSZip as a Static Resource

First, you need to add the JSZip library to your Salesforce org as a static resource:

1. Download the JSZip library from https://stuk.github.io/jszip/ or use npm to get the package
2. Navigate to Setup > Static Resources in your Salesforce org
3. Click "New" to create a new static resource
4. Name the resource "JSZip" (or your preferred name)
5. Upload the JSZip file (typically jszip.min.js)
6. Set the Cache Control to "Public"
7. Click "Save"

### 2. Creating a Lightning Component with JSZip

Create a Lightning component that uses the JSZip library:

```html
<aura:component implements="force:appHostable,flexipage:availableForAllPageTypes">
    <!-- Load the JSZip library -->
    <ltng:require scripts="{!$Resource.JSZip + '/jszip.min.js'}"
                  afterScriptsLoaded="{!c.scriptsLoaded}"/>

    <!-- Component attributes -->
    <aura:attribute name="extractedFiles" type="List" default="[]"/>

    <!-- File Upload Interface -->
    <lightning:card title="ZIP File Processor">
        <div class="slds-p-around_medium">
            <lightning:input type="file" label="Select ZIP File"
                             accept=".zip" onchange="{!c.handleFileUpload}"/>
        </div>
    </lightning:card>

    <!-- Display extracted file information -->
    <aura:if isTrue="{!not(empty(v.extractedFiles))}">
        <lightning:card title="Extracted Files">
            <div class="slds-p-around_medium">
                <aura:iteration items="{!v.extractedFiles}" var="file">
                    <p>{!file.name} - {!file.size} bytes</p>
                </aura:iteration>
            </div>
        </lightning:card>
    </aura:if>
</aura:component>

```

### 3. Implementing the Controller Logic

Create the JavaScript controller to handle the file processing:

```jsx
({
    scriptsLoaded: function(component, event, helper) {
        console.log("JSZip library loaded successfully");
    },

    handleFileUpload: function(component, event, helper) {
        // Get the selected file
        var fileInput = event.getSource().get("v.files")[0];

        if (fileInput) {
            // Create file reader
            var reader = new FileReader();

            reader.onload = function(e) {
                var contents = e.target.result;

                // Initialize JSZip
                var zip = new JSZip();

                // Load the ZIP file contents
                zip.loadAsync(contents).then(function(zip) {
                    var extractedFiles = [];

                    // Process each file in the ZIP
                    zip.forEach(function(relativePath, zipEntry) {
                        // Skip directories
                        if (!zipEntry.dir) {
                            extractedFiles.push({
                                name: zipEntry.name,
                                size: zipEntry.uncompressedSize
                            });

                            // To process file content:
                            // zipEntry.async('text').then(function(content) {
                            //     // Process content here
                            // });
                        }
                    });

                    // Update the component attribute
                    component.set('v.extractedFiles', extractedFiles);
                }).catch(function(error) {
                    console.error("Error processing ZIP file:", error);
                });
            };

            // Read the file as an array buffer
            reader.readAsArrayBuffer(fileInput);
        }
    }
})

```

### 4. Adding Server-Side Integration (Optional)

For more advanced scenarios, you may want to process the extracted files on the server:

```jsx
// Client-side controller snippet
zipEntry.async('base64').then(function(content) {
    // Call Apex method to save the file
    var action = component.get("c.saveFile");
    action.setParams({
        fileName: zipEntry.name,
        fileContent: content
    });

    action.setCallback(this, function(response) {
        var state = response.getState();
        if (state === "SUCCESS") {
            console.log("File saved: " + zipEntry.name);
        }
    });

    $A.enqueueAction(action);
});

```

Corresponding Apex controller:

```java
public class ZipFileController {
    @AuraEnabled
    public static Id saveFile(String fileName, String fileContent) {
        ContentVersion cv = new ContentVersion();
        cv.Title = fileName;
        cv.PathOnClient = fileName;
        cv.VersionData = EncodingUtil.base64Decode(fileContent);
        cv.IsMajorVersion = true;

        insert cv;
        return cv.Id;
    }
}

```

## Working with JSZip in Lightning Web Components (LWC)

For modern Lightning Web Components, the integration is similar:

```jsx
// Import the JSZip library in your LWC JS file
import { loadScript } from 'lightning/platformResourceLoader';
import jsZipResource from '@salesforce/resourceUrl/JSZip';

export default class ZipFileProcessor extends LightningElement {
    jsZipInitialized = false;

    connectedCallback() {
        loadScript(this, jsZipResource + '/jszip.min.js')
            .then(() => {
                this.jsZipInitialized = true;
                console.log('JSZip initialized');
            })
            .catch(error => {
                console.error('Error loading JSZip', error);
            });
    }

    handleFileUpload(event) {
        if (this.jsZipInitialized) {
            const file = event.target.files[0];
            // Process with JSZip (similar to Aura example)
        }
    }
}

```

## Best Practices for JSZip Integration

1. **Performance Considerations**
    - Process large files in chunks to avoid browser memory issues
    - Use async/await or promises to handle asynchronous operations
    - Consider server-side processing for very large files
2. **Error Handling**
    - Implement robust error handling for file reading and extraction
    - Validate ZIP files before processing
    - Provide user feedback during processing
3. **Security**
    - Validate file contents before saving to Salesforce
    - Implement proper access controls for the Lightning component
    - Be cautious with executable files extracted from ZIP archives

## Conclusion
